@page "/products/delete/{id:int}"

@inject AppDbContext Context;
@inject NavigationManager NavManager

<Heading title="@model?.Title" buttonTitle="go Back" buttonAction="@NavigateToList"></Heading>


<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="model.Title" readonly="true" disabled="true" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="model.Price" readonly="true" disabled="true" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-Value="model.CategoryId" class="form-control" readonly="true" disabled="true">
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Id - @category.Title</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    <div class="alert alert-danger" role="alert">
        The product @model?.Title will be deleted, are you sure?
    </div>
    <button class="btn btn-danger" type="submit">Delete @model.Title</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private Product? model = new();
    private List<Category> categories = new();
    private string? errorMessage = null;

    //NgOnInit()
    protected override async Task OnInitializedAsync()
    {
        categories = await Context.Categories.AsNoTracking().OrderBy(x => x.Title).ToListAsync();
        model = await Context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    //Submit form
    private async Task HandleSubmit()
    {
        try
        {
            var prod = await Context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (prod is null)
                throw new Exception("Produto não encontrado");

            Context.Products.Remove(prod);
            await Context.SaveChangesAsync();

            NavManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    //Navigate to List
    public void NavigateToList()
    {
        NavManager.NavigateTo("/products");
    }
}